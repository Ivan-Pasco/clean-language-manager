name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: cleanmanager
            archive_name: cleanmanager-linux-x86_64.tar.gz
          
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: cleanmanager
            archive_name: cleanmanager-macos-x86_64.tar.gz
          
          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: cleanmanager
            archive_name: cleanmanager-macos-aarch64.tar.gz
          
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: cleanmanager.exe
            archive_name: cleanmanager-windows-x86_64.zip

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.archive_name }}
        path: ${{ matrix.archive_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Display structure of downloaded files
      run: ls -la
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Clean Language Manager ${{ github.ref }}
        body: |
          ## Clean Language Manager Release
          
          ### Installation
          
          #### Quick Install (Recommended)
          ```bash
          curl -sSL https://github.com/${{ github.repository }}/releases/latest/download/install.sh | bash
          ```
          
          #### Manual Installation
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Move the binary to a directory in your PATH
          4. Run `cleanmanager init` to set up your environment
          
          ### Platform Downloads
          - **Linux (x86_64)**: cleanmanager-linux-x86_64.tar.gz
          - **macOS (Intel)**: cleanmanager-macos-x86_64.tar.gz  
          - **macOS (Apple Silicon)**: cleanmanager-macos-aarch64.tar.gz
          - **Windows (x86_64)**: cleanmanager-windows-x86_64.zip
          
          ### Usage
          ```bash
          cleanmanager init                    # Set up environment
          cleanmanager install 1.2.3         # Install a version
          cleanmanager use 1.2.3             # Switch to a version
          cleanmanager list                   # List installed versions
          cleanmanager doctor                 # Check environment
          ```
          
          For more information, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
        draft: false
        prerelease: false
    
    - name: Upload Linux release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cleanmanager-linux-x86_64.tar.gz/cleanmanager-linux-x86_64.tar.gz
        asset_name: cleanmanager-linux-x86_64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload macOS Intel release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cleanmanager-macos-x86_64.tar.gz/cleanmanager-macos-x86_64.tar.gz
        asset_name: cleanmanager-macos-x86_64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload macOS ARM release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cleanmanager-macos-aarch64.tar.gz/cleanmanager-macos-aarch64.tar.gz
        asset_name: cleanmanager-macos-aarch64.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Windows release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./cleanmanager-windows-x86_64.zip/cleanmanager-windows-x86_64.zip
        asset_name: cleanmanager-windows-x86_64.zip
        asset_content_type: application/zip
    
    - name: Upload install script (Unix)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./install.sh
        asset_name: install.sh
        asset_content_type: text/plain
    
    - name: Upload install script (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./install.ps1
        asset_name: install.ps1
        asset_content_type: text/plain